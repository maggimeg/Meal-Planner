
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Heart, Clock, Users, Star } from "lucide-react";

const difficultyColors = {
  easy: "bg-green-100 text-green-800",
  medium: "bg-yellow-100 text-yellow-800",
  hard: "bg-red-100 text-red-800"
};

const mealTypeColors = {
  breakfast: "bg-yellow-100 text-yellow-800",
  lunch: "bg-green-100 text-green-800",
  dinner: "bg-blue-100 text-blue-800",
  snack: "bg-purple-100 text-purple-800",
  dessert: "bg-pink-100 text-pink-800"
};

export default function RecipeCard({ recipe, isFavorite, onFavoriteToggle, onClick }) {
  const totalTime = (recipe.prep_time || 0) + (recipe.cook_time || 0);

  return (
    <Card 
      className="group cursor-pointer hover:shadow-lg transition-all duration-300 overflow-hidden"
      onClick={onClick}
    >
      <div className="relative">
        <img
          src={recipe.image_url || `https://images.unsplash.com/photo-1546554137-f86b9593a222?w=400&h=300&fit=crop`}
          alt={recipe.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
        />
        <Button
          size="icon"
          variant={isFavorite ? "default" : "secondary"}
          className={`absolute top-3 right-3 w-8 h-8 ${
            isFavorite 
              ? "bg-red-500 hover:bg-red-600 text-white" 
              : "bg-white/80 hover:bg-white text-gray-600"
          }`}
          onClick={(e) => {
            e.stopPropagation();
            onFavoriteToggle(recipe.id);
          }}
        >
          <Heart className={`w-4 h-4 ${isFavorite ? "fill-current" : ""}`} />
        </Button>
      </div>
      
      <CardContent className="p-4">
        <div className="flex items-start justify-between gap-2 mb-2">
          <h3 className="font-semibold text-gray-900 line-clamp-2 flex-1">{recipe.title}</h3>
          {recipe.difficulty && (
            <Badge size="sm" className={difficultyColors[recipe.difficulty]}>
              {recipe.difficulty}
            </Badge>
          )}
        </div>
        
        {recipe.description && (
          <p className="text-sm text-gray-600 mb-3 line-clamp-2">{recipe.description}</p>
        )}
        
        <div className="flex items-center justify-between text-sm text-gray-500 mb-3">
          {totalTime > 0 && (
            <span className="flex items-center gap-1">
              <Clock className="w-4 h-4" />
              {totalTime}m
            </span>
          )}
          {recipe.servings && (
            <span className="flex items-center gap-1">
              <Users className="w-4 h-4" />
              {recipe.servings}
            </span>
          )}
        </div>
        
        <div className="flex flex-wrap gap-1">
          {recipe.meal_type && (
            <Badge size="sm" variant="outline" className={mealTypeColors[recipe.meal_type]}>
              {recipe.meal_type}
            </Badge>
          )}
          {recipe.dietary_tags?.slice(0, 2).map((tag) => (
            <Badge key={tag} size="sm" variant="outline" className="text-xs">
              {tag.replace('_', ' ')}
            </Badge>
          ))}
          {recipe.dietary_tags?.length > 2 && (
            <Badge size="sm" variant="outline" className="text-xs">
              +{recipe.dietary_tags.length - 2}
            </Badge>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
