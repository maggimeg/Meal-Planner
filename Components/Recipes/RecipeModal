
import React from "react";
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Heart, Clock, Users, ChefHat, Calendar } from "lucide-react";

const difficultyColors = {
  easy: "bg-green-100 text-green-800",
  medium: "bg-yellow-100 text-yellow-800", 
  hard: "bg-red-100 text-red-800"
};

export default function RecipeModal({ recipe, isFavorite, onClose, onFavoriteToggle }) {
  if (!recipe) return null;

  const totalTime = (recipe.prep_time || 0) + (recipe.cook_time || 0);

  return (
    <Dialog open={!!recipe} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">{recipe.title}</DialogTitle>
          {recipe.description && (
            <DialogDescription className="text-gray-600">
              {recipe.description}
            </DialogDescription>
          )}
        </DialogHeader>

        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <img
              src={recipe.image_url || `https://images.unsplash.com/photo-1546554137-f86b9593a222?w=500&h=400&fit=crop`}
              alt={recipe.title}
              className="w-full h-64 object-cover rounded-lg"
            />
            
            <div className="flex items-center justify-between mt-4">
              <div className="flex items-center gap-4 text-sm text-gray-600">
                {totalTime > 0 && (
                  <span className="flex items-center gap-1">
                    <Clock className="w-4 h-4" />
                    {totalTime}m
                  </span>
                )}
                {recipe.servings && (
                  <span className="flex items-center gap-1">
                    <Users className="w-4 h-4" />
                    {recipe.servings} servings
                  </span>
                )}
                {recipe.difficulty && (
                  <Badge className={difficultyColors[recipe.difficulty]}>
                    {recipe.difficulty}
                  </Badge>
                )}
              </div>
              <Button
                variant={isFavorite ? "default" : "outline"}
                size="sm"
                onClick={() => onFavoriteToggle(recipe.id)}
                className={isFavorite ? "bg-red-500 hover:bg-red-600" : ""}
              >
                <Heart className={`w-4 h-4 mr-1 ${isFavorite ? "fill-current" : ""}`} />
                {isFavorite ? "Favorited" : "Add to Favorites"}
              </Button>
            </div>

            {recipe.dietary_tags && recipe.dietary_tags.length > 0 && (
              <div className="mt-4">
                <h4 className="font-medium mb-2">Dietary Information</h4>
                <div className="flex flex-wrap gap-2">
                  {recipe.dietary_tags.map((tag) => (
                    <Badge key={tag} variant="outline">
                      {tag.replace('_', ' ')}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            {recipe.nutrition && (
              <div className="mt-4">
                <h4 className="font-medium mb-2">Nutrition (per serving)</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  {recipe.nutrition.calories && (
                    <div>Calories: {recipe.nutrition.calories}</div>
                  )}
                  {recipe.nutrition.protein && (
                    <div>Protein: {recipe.nutrition.protein}g</div>
                  )}
                  {recipe.nutrition.carbs && (
                    <div>Carbs: {recipe.nutrition.carbs}g</div>
                  )}
                  {recipe.nutrition.fat && (
                    <div>Fat: {recipe.nutrition.fat}g</div>
                  )}
                </div>
              </div>
            )}
          </div>

          <div>
            {recipe.ingredients && recipe.ingredients.length > 0 && (
              <div className="mb-6">
                <h4 className="font-medium mb-3 flex items-center gap-2">
                  <ChefHat className="w-4 h-4" />
                  Ingredients
                </h4>
                <ul className="space-y-2">
                  {recipe.ingredients.map((ingredient, index) => (
                    <li key={index} className="flex justify-between text-sm">
                      <span>{ingredient.name}</span>
                      <span className="text-gray-500">
                        {ingredient.amount} {ingredient.unit}
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
            )}

            <Separator className="my-6" />

            {recipe.instructions && recipe.instructions.length > 0 && (
              <div>
                <h4 className="font-medium mb-3">Instructions</h4>
                <ol className="space-y-3">
                  {recipe.instructions.map((step, index) => (
                    <li key={index} className="flex gap-3">
                      <span className="flex-shrink-0 w-6 h-6 bg-orange-500 text-white rounded-full text-xs flex items-center justify-center">
                        {index + 1}
                      </span>
                      <span className="text-sm text-gray-700">{step}</span>
                    </li>
                  ))}
                </ol>
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
