import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Plus, X, Clock, Users } from "lucide-react";
import { format, parseISO, addDays } from "date-fns";

const mealTypes = ['breakfast', 'lunch', 'dinner', 'snack'];

const mealTypeColors = {
  breakfast: "bg-yellow-100 text-yellow-800 border-yellow-200",
  lunch: "bg-green-100 text-green-800 border-green-200", 
  dinner: "bg-blue-100 text-blue-800 border-blue-200",
  snack: "bg-purple-100 text-purple-800 border-purple-200"
};

export default function WeeklyCalendar({ 
  weekStart, 
  mealPlans, 
  isLoading, 
  onAddMeal, 
  onRemoveMeal 
}) {
  const weekDays = Array.from({length: 7}, (_, i) => addDays(weekStart, i));

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
        {Array(7).fill(0).map((_, i) => (
          <Card key={i}>
            <CardHeader className="pb-3">
              <Skeleton className="h-4 w-16" />
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {Array(4).fill(0).map((_, j) => (
                  <Skeleton key={j} className="h-20 w-full rounded" />
                ))}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-7 gap-4">
      {weekDays.map((day, dayIndex) => {
        const dateStr = format(day, 'yyyy-MM-dd');
        const dayPlans = mealPlans.find(mp => mp.date === dateStr)?.plans || [];
        const isToday = format(day, 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd');

        return (
          <Card 
            key={dateStr} 
            className={`min-h-[500px] ${isToday ? 'ring-2 ring-orange-200 bg-orange-50/30' : ''}`}
          >
            <CardHeader className="pb-3">
              <CardTitle className={`text-center ${isToday ? 'text-orange-700' : 'text-gray-700'}`}>
                <div className="font-medium text-sm">
                  {format(day, 'EEE')}
                </div>
                <div className={`text-xl font-bold ${isToday ? 'text-orange-700' : 'text-gray-900'}`}>
                  {format(day, 'd')}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {mealTypes.map((mealType) => {
                const existingMeal = dayPlans.find(plan => plan.meal_type === mealType);
                
                return (
                  <div 
                    key={mealType}
                    className={`min-h-[100px] border-2 border-dashed rounded-lg p-3 ${
                      existingMeal ? 'border-gray-200' : 'border-gray-300'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <Badge 
                        size="sm" 
                        variant="outline"
                        className={mealTypeColors[mealType]}
                      >
                        {mealType}
                      </Badge>
                      {!existingMeal && (
                        <Button
                          size="icon"
                          variant="ghost"
                          className="h-6 w-6 text-gray-400 hover:text-gray-600"
                          onClick={() => onAddMeal(dateStr, mealType)}
                        >
                          <Plus className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                    
                    {existingMeal ? (
                      <div className="relative group">
                        <Button
                          size="icon"
                          variant="ghost"
                          className="absolute -top-1 -right-1 h-5 w-5 text-red-500 hover:text-red-700 opacity-0 group-hover:opacity-100 transition-opacity"
                          onClick={() => onRemoveMeal(existingMeal.id)}
                        >
                          <X className="w-3 h-3" />
                        </Button>
                        
                        <div className="bg-white rounded border p-2">
                          <img
                            src={existingMeal.recipe_image || `https://images.unsplash.com/photo-1546554137-f86b9593a222?w=100&h=60&fit=crop`}
                            alt={existingMeal.recipe_title}
                            className="w-full h-12 object-cover rounded mb-2"
                          />
                          <h4 className="text-xs font-medium text-gray-900 mb-1 line-clamp-2">
                            {existingMeal.recipe_title}
                          </h4>
                          {existingMeal.servings_planned && (
                            <div className="text-xs text-gray-500 flex items-center gap-1">
                              <Users className="w-3 h-3" />
                              {existingMeal.servings_planned} servings
                            </div>
                          )}
                        </div>
                      </div>
                    ) : (
                      <div className="text-center text-gray-400 text-xs mt-4">
                        Click + to add meal
                      </div>
                    )}
                  </div>
                );
              })}
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}
