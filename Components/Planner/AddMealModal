
import React, { useState, useEffect, useCallback } from "react";
import { Recipe } from "@/entities/all";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Search, Clock, Users } from "lucide-react";
import { format, parseISO } from "date-fns";

export default function AddMealModal({ date, mealType, onSave, onClose }) {
  const [recipes, setRecipes] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRecipe, setSelectedRecipe] = useState(null);
  const [servings, setServings] = useState(1);
  const [notes, setNotes] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  const loadRecipes = useCallback(async () => {
    try {
      const allRecipes = await Recipe.list('-created_date', 50);
      // Filter by meal type if specific
      const filteredRecipes = mealType === 'snack' 
        ? allRecipes 
        : allRecipes.filter(r => r.meal_type === mealType);
      setRecipes(filteredRecipes);
    } catch (error) {
      console.error("Error loading recipes:", error);
    } finally {
      setIsLoading(false);
    }
  }, [mealType]); // mealType is a dependency of loadRecipes

  useEffect(() => {
    loadRecipes();
  }, [loadRecipes]); // loadRecipes is a dependency of useEffect

  const filteredRecipes = recipes.filter(recipe =>
    recipe.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSave = () => {
    if (!selectedRecipe) return;

    const mealData = {
      date,
      meal_type: mealType,
      recipe_id: selectedRecipe.id,
      recipe_title: selectedRecipe.title,
      recipe_image: selectedRecipe.image_url,
      servings_planned: servings,
      notes
    };

    onSave(mealData);
  };

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh]">
        <DialogHeader>
          <DialogTitle>
            Add {mealType} for {format(parseISO(date), 'EEEE, MMM d')}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              placeholder="Search recipes..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          <ScrollArea className="h-64 border rounded-lg p-2">
            {isLoading ? (
              <div className="text-center py-8 text-gray-500">Loading recipes...</div>
            ) : filteredRecipes.length === 0 ? (
              <div className="text-center py-8 text-gray-500">No recipes found</div>
            ) : (
              <div className="space-y-2">
                {filteredRecipes.map((recipe) => (
                  <div
                    key={recipe.id}
                    className={`flex items-center gap-3 p-3 rounded-lg cursor-pointer transition-colors ${
                      selectedRecipe?.id === recipe.id 
                        ? 'bg-orange-100 border-orange-300' 
                        : 'hover:bg-gray-50 border-transparent'
                    } border`}
                    onClick={() => setSelectedRecipe(recipe)}
                  >
                    <img
                      src={recipe.image_url || `https://images.unsplash.com/photo-1546554137-f86b9593a222?w=60&h=60&fit=crop`}
                      alt={recipe.title}
                      className="w-12 h-12 rounded object-cover"
                    />
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900">{recipe.title}</h4>
                      <div className="flex items-center gap-3 text-xs text-gray-500 mt-1">
                        {recipe.cook_time && (
                          <span className="flex items-center gap-1">
                            <Clock className="w-3 h-3" />
                            {recipe.cook_time}m
                          </span>
                        )}
                        {recipe.servings && (
                          <span className="flex items-center gap-1">
                            <Users className="w-3 h-3" />
                            {recipe.servings}
                          </span>
                        )}
                        {recipe.meal_type && (
                          <Badge size="sm" variant="outline">
                            {recipe.meal_type}
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </ScrollArea>

          {selectedRecipe && (
            <div className="space-y-4 border-t pt-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="servings">Servings</Label>
                  <Input
                    id="servings"
                    type="number"
                    min="1"
                    value={servings}
                    onChange={(e) => setServings(parseInt(e.target.value) || 1)}
                  />
                </div>
                <div>
                  <Label htmlFor="notes">Notes (optional)</Label>
                  <Input
                    id="notes"
                    placeholder="e.g. extra spicy"
                    value={notes}
                    onChange={(e) => setNotes(e.target.value)}
                  />
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-end gap-3 pt-4 border-t">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button 
              onClick={handleSave}
              disabled={!selectedRecipe}
              className="bg-orange-500 hover:bg-orange-600"
            >
              Add to Meal Plan
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
