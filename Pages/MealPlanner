import React, { useState, useEffect, useCallback } from "react";
import { MealPlan, Recipe } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Calendar, ChevronLeft, ChevronRight, Plus } from "lucide-react";
import { format, startOfWeek, addDays, addWeeks, subWeeks } from "date-fns";
import { User } from "@/entities/all";

import WeeklyCalendar from "../components/planner/WeeklyCalendar";
import AddMealModal from "../components/planner/AddMealModal";

export default function MealPlanner() {
  const [currentWeek, setCurrentWeek] = useState(startOfWeek(new Date(), { weekStartsOn: 1 }));
  const [weeklyMealPlan, setWeeklyMealPlan] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showAddMeal, setShowAddMeal] = useState(false);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [user, setUser] = useState(null);

  const loadWeeklyMealPlan = useCallback(async () => {
    setIsLoading(true);
    try {
      const currentUser = user || (await User.me());
      if (!user) setUser(currentUser);

      const weekDates = Array.from({length: 7}, (_, i) => 
        format(addDays(currentWeek, i), 'yyyy-MM-dd')
      );
      
      const weeklyPlans = await Promise.all(
        weekDates.map(async date => {
          const plans = await MealPlan.filter({ date, created_by: currentUser.email });
          return { date, plans };
        })
      );
      
      setWeeklyMealPlan(weeklyPlans);
    } catch (error) {
      console.error("Error loading meal plan:", error);
    } finally {
      setIsLoading(false);
    }
  }, [currentWeek, user]);

  useEffect(() => {
    loadWeeklyMealPlan();
  }, [loadWeeklyMealPlan]);

  const handleAddMeal = (date, mealType) => {
    setSelectedSlot({ date, mealType });
    setShowAddMeal(true);
  };

  const handleSaveMeal = async (mealData) => {
    try {
      await MealPlan.create(mealData);
      setShowAddMeal(false);
      setSelectedSlot(null);
      loadWeeklyMealPlan();
    } catch (error) {
      console.error("Error saving meal:", error);
    }
  };

  const handleRemoveMeal = async (mealId) => {
    try {
      await MealPlan.delete(mealId);
      loadWeeklyMealPlan();
    } catch (error) {
      console.error("Error removing meal:", error);
    }
  };

  const navigateWeek = (direction) => {
    if (direction === 'prev') {
      setCurrentWeek(subWeeks(currentWeek, 1));
    } else {
      setCurrentWeek(addWeeks(currentWeek, 1));
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-green-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">Meal Planner</h1>
            <p className="text-gray-600">Plan your weekly meals for better nutrition and organization</p>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="icon"
                onClick={() => navigateWeek('prev')}
              >
                <ChevronLeft className="w-4 h-4" />
              </Button>
              <div className="text-center min-w-[140px]">
                <div className="font-semibold text-gray-900">
                  {format(currentWeek, 'MMM d')} - {format(addDays(currentWeek, 6), 'MMM d')}
                </div>
                <div className="text-sm text-gray-500">
                  {format(currentWeek, 'yyyy')}
                </div>
              </div>
              <Button
                variant="outline"
                size="icon"
                onClick={() => navigateWeek('next')}
              >
                <ChevronRight className="w-4 h-4" />
              </Button>
            </div>
            <Button 
              onClick={() => setCurrentWeek(startOfWeek(new Date(), { weekStartsOn: 1 }))}
              variant="outline"
            >
              <Calendar className="w-4 h-4 mr-2" />
              This Week
            </Button>
          </div>
        </div>

        <WeeklyCalendar
          weekStart={currentWeek}
          mealPlans={weeklyMealPlan}
          isLoading={isLoading}
          onAddMeal={handleAddMeal}
          onRemoveMeal={handleRemoveMeal}
        />
      </div>

      {showAddMeal && selectedSlot && (
        <AddMealModal
          date={selectedSlot.date}
          mealType={selectedSlot.mealType}
          onSave={handleSaveMeal}
          onClose={() => {
            setShowAddMeal(false);
            setSelectedSlot(null);
          }}
        />
      )}
    </div>
  );
}
