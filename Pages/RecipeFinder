import React, { useState, useEffect, useCallback } from "react";
import { Recipe, User, UserFavorite } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { 
  Search, 
  Heart, 
  Clock, 
  Users, 
  Filter,
  Plus,
  ChefHat
} from "lucide-react";

import RecipeCard from "../components/recipes/RecipeCard";
import RecipeFilters from "../components/recipes/RecipeFilters";
import RecipeModal from "../components/recipes/RecipeModal";

export default function RecipeFinder() {
  const [recipes, setRecipes] = useState([]);
  const [filteredRecipes, setFilteredRecipes] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilters, setSelectedFilters] = useState({
    meal_type: "",
    dietary_tags: [],
    difficulty: "",
    max_cook_time: ""
  });
  const [showFilters, setShowFilters] = useState(false);
  const [selectedRecipe, setSelectedRecipe] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState(null);
  const [userFavorites, setUserFavorites] = useState([]);
  const [favoriteRecipeIds, setFavoriteRecipeIds] = useState(new Set());

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    setIsLoading(true);
    try {
      const [currentUser, allRecipes, favorites] = await Promise.all([
        User.me(),
        Recipe.list('-created_date', 100), // Increased limit to fetch more recipes if needed
        UserFavorite.list()
      ]);
      
      setUser(currentUser);
      setRecipes(allRecipes);
      
      const currentUserFavorites = favorites.filter(fav => fav.created_by === currentUser.email);
      setUserFavorites(currentUserFavorites);
      setFavoriteRecipeIds(new Set(currentUserFavorites.map(fav => fav.recipe_id)));
      
    } catch (error) {
      console.error("Error loading initial data:", error);
      // Handle error, e.g., show a message to the user
    } finally {
      setIsLoading(false);
    }
  };

  const filterRecipes = useCallback(() => {
    let filtered = recipes;

    if (searchTerm) {
      filtered = filtered.filter(recipe => 
        recipe.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        recipe.description?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedFilters.meal_type) {
      filtered = filtered.filter(recipe => recipe.meal_type === selectedFilters.meal_type);
    }

    if (selectedFilters.dietary_tags.length > 0) {
      filtered = filtered.filter(recipe => 
        selectedFilters.dietary_tags.some(tag => recipe.dietary_tags?.includes(tag))
      );
    }

    if (selectedFilters.difficulty) {
      filtered = filtered.filter(recipe => recipe.difficulty === selectedFilters.difficulty);
    }

    if (selectedFilters.max_cook_time) {
      const maxTime = parseInt(selectedFilters.max_cook_time);
      filtered = filtered.filter(recipe => 
        (recipe.cook_time || 0) <= maxTime
      );
    }

    setFilteredRecipes(filtered);
  }, [searchTerm, selectedFilters, recipes]); // Dependencies for useCallback

  useEffect(() => {
    filterRecipes();
  }, [filterRecipes]); // Effect now depends on the memoized filterRecipes function

  const toggleFavorite = async (recipeId) => {
    try {
      const isCurrentlyFavorite = favoriteRecipeIds.has(recipeId);
      
      if (isCurrentlyFavorite) {
        // Find the specific UserFavorite object to delete
        const favoriteToRemove = userFavorites.find(fav => fav.recipe_id === recipeId && fav.created_by === user?.email);
        if (favoriteToRemove) {
          await UserFavorite.delete(favoriteToRemove.id);
          const updatedFavorites = userFavorites.filter(fav => fav.id !== favoriteToRemove.id);
          setUserFavorites(updatedFavorites);
          setFavoriteRecipeIds(new Set(updatedFavorites.map(fav => fav.recipe_id)));
        }
      } else {
        // Create a new UserFavorite object
        const newFavorite = await UserFavorite.create({ recipe_id: recipeId });
        const updatedFavorites = [...userFavorites, newFavorite];
        setUserFavorites(updatedFavorites);
        setFavoriteRecipeIds(new Set(updatedFavorites.map(fav => fav.recipe_id)));
      }
    } catch (error) {
      console.error("Error toggling favorite:", error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-green-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">Recipe Finder</h1>
            <p className="text-gray-600">Discover delicious recipes for every occasion</p>
          </div>
        </div>

        <div className="flex flex-col lg:flex-row gap-8">
          <div className="lg:w-80">
            <Card className="sticky top-4">
              <CardContent className="p-6">
                <div className="space-y-6">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="Search recipes..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>

                  <Button
                    variant="outline"
                    onClick={() => setShowFilters(!showFilters)}
                    className="w-full justify-between"
                  >
                    <span className="flex items-center gap-2">
                      <Filter className="w-4 h-4" />
                      Filters
                    </span>
                    <Badge variant="secondary">
                      {Object.values(selectedFilters).flat().filter(Boolean).length}
                    </Badge>
                  </Button>

                  {showFilters && (
                    <RecipeFilters 
                      filters={selectedFilters}
                      onFiltersChange={setSelectedFilters}
                    />
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="flex-1">
            {isLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {Array(6).fill(0).map((_, i) => (
                  <Card key={i} className="animate-pulse">
                    <div className="h-48 bg-gray-200 rounded-t-lg" />
                    <CardContent className="p-4">
                      <div className="h-4 bg-gray-200 rounded w-3/4 mb-2" />
                      <div className="h-3 bg-gray-200 rounded w-1/2" />
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : filteredRecipes.length === 0 ? (
              <div className="text-center py-12">
                <ChefHat className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No recipes found</h3>
                <p className="text-gray-500 mb-6">Try adjusting your search terms or filters</p>
                <Button 
                  onClick={() => {
                    setSearchTerm("");
                    setSelectedFilters({ meal_type: "", dietary_tags: [], difficulty: "", max_cook_time: "" });
                  }}
                  variant="outline"
                >
                  Clear All Filters
                </Button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredRecipes.map((recipe) => (
                  <RecipeCard
                    key={recipe.id}
                    recipe={recipe}
                    isFavorite={favoriteRecipeIds.has(recipe.id)}
                    onFavoriteToggle={toggleFavorite}
                    onClick={() => setSelectedRecipe(recipe)}
                  />
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {selectedRecipe && (
        <RecipeModal
          recipe={selectedRecipe}
          isFavorite={favoriteRecipeIds.has(selectedRecipe.id)}
          onClose={() => setSelectedRecipe(null)}
          onFavoriteToggle={toggleFavorite}
        />
      )}
    </div>
  );
}
