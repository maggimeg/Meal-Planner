import React, { useState, useEffect, useCallback } from "react";
import { Recipe, MealPlan, User, UserFavorite } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  Calendar, 
  Clock, 
  ChefHat, 
  TrendingUp,
  Plus,
  ArrowRight,
  Utensils
} from "lucide-react";
import { format, startOfWeek, addDays } from "date-fns";

import WeeklyOverview from "../components/dashboard/WeeklyOverview";
import QuickStats from "../components/dashboard/QuickStats";
import TodaysMeals from "../components/dashboard/TodaysMeals";
import FavoriteRecipes from "../components/dashboard/FavoriteRecipes";

export default function Dashboard() {
  const [todaysMealPlan, setTodaysMealPlan] = useState([]);
  const [weeklyMealPlan, setWeeklyMealPlan] = useState([]);
  const [favoriteRecipes, setFavoriteRecipes] = useState([]);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // Moved today and weekStart inside useCallback to ensure they are stable for the callback's dependencies
  // and are re-evaluated if loadDashboardData is called (e.g., via onRefresh)
  const loadDashboardData = useCallback(async () => {
    const today = new Date();
    const weekStart = startOfWeek(today, { weekStartsOn: 1 });

    try {
      const currentUser = await User.me();
      setUser(currentUser);

      const todaysPlans = await MealPlan.filter({
        date: format(today, 'yyyy-MM-dd'),
        created_by: currentUser.email
      });
      setTodaysMealPlan(todaysPlans);

      const weekDates = Array.from({length: 7}, (_, i) => 
        format(addDays(weekStart, i), 'yyyy-MM-dd')
      );
      
      const weeklyPlans = await Promise.all(
        weekDates.map(date => 
          MealPlan.filter({ date, created_by: currentUser.email }).then(plans => ({ date, plans }))
        )
      );
      setWeeklyMealPlan(weeklyPlans);

      const userFavorites = await UserFavorite.filter({ created_by: currentUser.email }, '-created_date', 6);
      const favoriteRecipeIds = userFavorites.map(fav => fav.recipe_id);

      if (favoriteRecipeIds.length > 0) {
        // In a real scenario with backend filtering, we'd do:
        // const favorites = await Recipe.filter({ id: { '$in': favoriteRecipeIds } });
        // With the current SDK, we fetch all and filter client-side.
        const allRecipes = await Recipe.list();
        const favorites = allRecipes.filter(recipe => favoriteRecipeIds.includes(recipe.id));
        setFavoriteRecipes(favorites);
      } else {
        setFavoriteRecipes([]);
      }

    } catch (error) {
      console.error("Error loading dashboard data:", error);
    } finally {
      setIsLoading(false);
    }
  }, []); // Dependencies array is empty because 'today' and 'weekStart' are created within the callback

  useEffect(() => {
    loadDashboardData();
  }, [loadDashboardData]);

  const totalRecipes = favoriteRecipes.length;
  const totalMealsPlanned = weeklyMealPlan.reduce((sum, day) => sum + day.plans.length, 0);
  const todaysMealsCount = todaysMealPlan.length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-green-50 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
              Good {new Date().getHours() < 12 ? 'Morning' : new Date().getHours() < 18 ? 'Afternoon' : 'Evening'}!
            </h1>
            <p className="text-gray-600 text-lg">
              Ready to plan some delicious meals?
            </p>
          </div>
          <div className="flex gap-3 w-full md:w-auto">
            <Link to={createPageUrl("RecipeFinder")} className="flex-1 md:flex-none">
              <Button className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600">
                <Plus className="w-4 h-4 mr-2" />
                Find Recipes
              </Button>
            </Link>
            <Link to={createPageUrl("MealPlanner")} className="flex-1 md:flex-none">
              <Button variant="outline" className="w-full border-orange-200 hover:bg-orange-50">
                <Calendar className="w-4 h-4 mr-2" />
                Plan Meals
              </Button>
            </Link>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          <QuickStats
            title="Today's Meals"
            value={todaysMealsCount}
            subtitle={`${4 - todaysMealsCount} meals remaining`}
            icon={Utensils}
            color="orange"
          />
          <QuickStats
            title="Weekly Plans"
            value={totalMealsPlanned}
            subtitle="meals planned this week"
            icon={Calendar}
            color="green"
          />
          <QuickStats
            title="Favorite Recipes"
            value={totalRecipes}
            subtitle="saved for quick access"
            icon={ChefHat}
            color="red"
          />
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
          <div className="xl:col-span-2 space-y-8">
            <TodaysMeals 
              mealPlan={todaysMealPlan}
              isLoading={isLoading}
              onRefresh={loadDashboardData}
            />
            <WeeklyOverview 
              weeklyMealPlan={weeklyMealPlan}
              isLoading={isLoading}
            />
          </div>

          <div className="space-y-8">
            <FavoriteRecipes 
              recipes={favoriteRecipes}
              isLoading={isLoading}
            />
            
            <Card className="bg-gradient-to-br from-orange-100 to-red-100 border-orange-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-orange-800">
                  <TrendingUp className="w-5 h-5" />
                  Weekly Tip
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-orange-700 mb-4">
                  Try meal prepping on Sundays! Cook 2-3 recipes in larger batches to save time during the week.
                </p>
                <Link to={createPageUrl("MealPlanner")}>
                  <Button size="sm" variant="outline" className="border-orange-300 text-orange-700 hover:bg-orange-50">
                    Plan This Week <ArrowRight className="w-4 h-4 ml-1" />
                  </Button>
                </Link>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
